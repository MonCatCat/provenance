// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/reward.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/provenance-io/provenance/x/epoch/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params holds parameters for the reward module
type Params struct {
	// distribution epoch identifier
	DistrEpochIdentifier string `protobuf:"bytes,1,opt,name=distr_epoch_identifier,json=distrEpochIdentifier,proto3" json:"distr_epoch_identifier,omitempty" yaml:"distr_epoch_identifier"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDistrEpochIdentifier() string {
	if m != nil {
		return m.DistrEpochIdentifier
	}
	return ""
}

// RewardProgram
type RewardProgram struct {
	Id                  uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DistributeFrom      string               `protobuf:"bytes,2,opt,name=distribute_from,json=distributeFrom,proto3" json:"distribute_from,omitempty"`
	Coin                *types.Coin          `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin,omitempty"`
	Epoch               *types1.EpochInfo    `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StartEpoch          int64                `protobuf:"varint,5,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	NumberEpochs        int64                `protobuf:"varint,6,opt,name=number_epochs,json=numberEpochs,proto3" json:"number_epochs,omitempty"`
	EligibilityCriteria *EligibilityCriteria `protobuf:"bytes,7,opt,name=eligibility_criteria,json=eligibilityCriteria,proto3" json:"eligibility_criteria,omitempty"`
}

func (m *RewardProgram) Reset()      { *m = RewardProgram{} }
func (*RewardProgram) ProtoMessage() {}
func (*RewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{1}
}
func (m *RewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgram.Merge(m, src)
}
func (m *RewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgram proto.InternalMessageInfo

func (m *RewardProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardProgram) GetDistributeFrom() string {
	if m != nil {
		return m.DistributeFrom
	}
	return ""
}

func (m *RewardProgram) GetCoin() *types.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

func (m *RewardProgram) GetEpoch() *types1.EpochInfo {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *RewardProgram) GetStartEpoch() int64 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *RewardProgram) GetNumberEpochs() int64 {
	if m != nil {
		return m.NumberEpochs
	}
	return 0
}

func (m *RewardProgram) GetEligibilityCriteria() *EligibilityCriteria {
	if m != nil {
		return m.EligibilityCriteria
	}
	return nil
}

// EpochRewardDistribution
type EpochRewardDistribution struct {
	Id              string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RewardProgramId int64       `protobuf:"varint,2,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	LiquidityPool   *types.Coin `protobuf:"bytes,3,opt,name=liquidity_pool,json=liquidityPool,proto3" json:"liquidity_pool,omitempty"`
}

func (m *EpochRewardDistribution) Reset()      { *m = EpochRewardDistribution{} }
func (*EpochRewardDistribution) ProtoMessage() {}
func (*EpochRewardDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{2}
}
func (m *EpochRewardDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochRewardDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochRewardDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochRewardDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochRewardDistribution.Merge(m, src)
}
func (m *EpochRewardDistribution) XXX_Size() int {
	return m.Size()
}
func (m *EpochRewardDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochRewardDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_EpochRewardDistribution proto.InternalMessageInfo

func (m *EpochRewardDistribution) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EpochRewardDistribution) GetRewardProgramId() int64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *EpochRewardDistribution) GetLiquidityPool() *types.Coin {
	if m != nil {
		return m.LiquidityPool
	}
	return nil
}

// // A Reward is the metadata of reward data per address
type RewardClaim struct {
	// address of user reward
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	RewardProgramId int64  `protobuf:"varint,2,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	// reward per-epoch map---move to message, epoch id, amount, dist or not
	RewardAmount types.Coin `protobuf:"bytes,3,opt,name=reward_amount,json=rewardAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_amount" yaml:"reward_amount"`
	// array of shares calculated per epoch
	SharesPerEpoch []int64 `protobuf:"varint,4,rep,packed,name=shares_per_epoch,json=sharesPerEpoch,proto3" json:"shares_per_epoch,omitempty"`
	// total shares at the end of rewards program
	TotalShares int64 `protobuf:"varint,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	// if the this height is exceeded before user claims shares will be returned
	ExpireHeight int64 `protobuf:"varint,6,opt,name=expire_height,json=expireHeight,proto3" json:"expire_height,omitempty"`
	// indicate if the user has claimed their rewards
	Claimed bool `protobuf:"varint,7,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (m *RewardClaim) Reset()      { *m = RewardClaim{} }
func (*RewardClaim) ProtoMessage() {}
func (*RewardClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3}
}
func (m *RewardClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaim.Merge(m, src)
}
func (m *RewardClaim) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaim.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaim proto.InternalMessageInfo

func (m *RewardClaim) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardClaim) GetRewardProgramId() int64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *RewardClaim) GetRewardAmount() types.Coin {
	if m != nil {
		return m.RewardAmount
	}
	return types.Coin{}
}

func (m *RewardClaim) GetSharesPerEpoch() []int64 {
	if m != nil {
		return m.SharesPerEpoch
	}
	return nil
}

func (m *RewardClaim) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *RewardClaim) GetExpireHeight() int64 {
	if m != nil {
		return m.ExpireHeight
	}
	return 0
}

func (m *RewardClaim) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

type ActionDelegate struct {
	Minimum int64 `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum int64 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *ActionDelegate) Reset()      { *m = ActionDelegate{} }
func (*ActionDelegate) ProtoMessage() {}
func (*ActionDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{4}
}
func (m *ActionDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDelegate.Merge(m, src)
}
func (m *ActionDelegate) XXX_Size() int {
	return m.Size()
}
func (m *ActionDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDelegate proto.InternalMessageInfo

func (m *ActionDelegate) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *ActionDelegate) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

type ActionTransfer struct {
	Minimum int64 `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum int64 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *ActionTransfer) Reset()      { *m = ActionTransfer{} }
func (*ActionTransfer) ProtoMessage() {}
func (*ActionTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{5}
}
func (m *ActionTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionTransfer.Merge(m, src)
}
func (m *ActionTransfer) XXX_Size() int {
	return m.Size()
}
func (m *ActionTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_ActionTransfer proto.InternalMessageInfo

func (m *ActionTransfer) GetMinimum() int64 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *ActionTransfer) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

// EligibilityCriteria defines an Action which accrues rewards for a running RewardProgram
type EligibilityCriteria struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to ActionType:
	//	*EligibilityCriteria_ActionTransfer
	//	*EligibilityCriteria_ActionDelegate
	ActionType isEligibilityCriteria_ActionType `protobuf_oneof:"action_type"`
}

func (m *EligibilityCriteria) Reset()      { *m = EligibilityCriteria{} }
func (*EligibilityCriteria) ProtoMessage() {}
func (*EligibilityCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{6}
}
func (m *EligibilityCriteria) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EligibilityCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EligibilityCriteria.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EligibilityCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EligibilityCriteria.Merge(m, src)
}
func (m *EligibilityCriteria) XXX_Size() int {
	return m.Size()
}
func (m *EligibilityCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_EligibilityCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_EligibilityCriteria proto.InternalMessageInfo

type isEligibilityCriteria_ActionType interface {
	isEligibilityCriteria_ActionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EligibilityCriteria_ActionTransfer struct {
	ActionTransfer *ActionTransfer `protobuf:"bytes,2,opt,name=action_transfer,json=actionTransfer,proto3,oneof" json:"action_transfer,omitempty"`
}
type EligibilityCriteria_ActionDelegate struct {
	ActionDelegate *ActionDelegate `protobuf:"bytes,3,opt,name=action_delegate,json=actionDelegate,proto3,oneof" json:"action_delegate,omitempty"`
}

func (*EligibilityCriteria_ActionTransfer) isEligibilityCriteria_ActionType() {}
func (*EligibilityCriteria_ActionDelegate) isEligibilityCriteria_ActionType() {}

func (m *EligibilityCriteria) GetActionType() isEligibilityCriteria_ActionType {
	if m != nil {
		return m.ActionType
	}
	return nil
}

func (m *EligibilityCriteria) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EligibilityCriteria) GetActionTransfer() *ActionTransfer {
	if x, ok := m.GetActionType().(*EligibilityCriteria_ActionTransfer); ok {
		return x.ActionTransfer
	}
	return nil
}

func (m *EligibilityCriteria) GetActionDelegate() *ActionDelegate {
	if x, ok := m.GetActionType().(*EligibilityCriteria_ActionDelegate); ok {
		return x.ActionDelegate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EligibilityCriteria) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EligibilityCriteria_ActionTransfer)(nil),
		(*EligibilityCriteria_ActionDelegate)(nil),
	}
}

func init() {
	proto.RegisterType((*Params)(nil), "provenance.reward.v1.Params")
	proto.RegisterType((*RewardProgram)(nil), "provenance.reward.v1.RewardProgram")
	proto.RegisterType((*EpochRewardDistribution)(nil), "provenance.reward.v1.EpochRewardDistribution")
	proto.RegisterType((*RewardClaim)(nil), "provenance.reward.v1.RewardClaim")
	proto.RegisterType((*ActionDelegate)(nil), "provenance.reward.v1.ActionDelegate")
	proto.RegisterType((*ActionTransfer)(nil), "provenance.reward.v1.ActionTransfer")
	proto.RegisterType((*EligibilityCriteria)(nil), "provenance.reward.v1.EligibilityCriteria")
}

func init() { proto.RegisterFile("provenance/reward/v1/reward.proto", fileDescriptor_0c3894741a216575) }

var fileDescriptor_0c3894741a216575 = []byte{
	// 821 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0x6c, 0xbb, 0x3b, 0x69, 0x52, 0x98, 0x8d, 0x58, 0xb3, 0x12, 0x71, 0x1b, 0x90,
	0x08, 0x88, 0xda, 0x4a, 0xe1, 0xb4, 0x27, 0xb6, 0xdd, 0x45, 0xdd, 0x0b, 0x44, 0x06, 0x09, 0x09,
	0x21, 0x59, 0x93, 0x78, 0xe2, 0x8c, 0xf0, 0x78, 0xcc, 0xcc, 0x38, 0xb4, 0xff, 0x60, 0x8f, 0x1c,
	0x39, 0x2e, 0x57, 0x7e, 0xc9, 0x1e, 0xf7, 0x88, 0x84, 0x14, 0x50, 0xcb, 0x81, 0x73, 0x7f, 0x01,
	0xf2, 0x9b, 0x31, 0x76, 0x21, 0xa2, 0x42, 0x9c, 0xea, 0xf9, 0xde, 0xf7, 0xde, 0xfb, 0xde, 0x9b,
	0x6f, 0x1a, 0x74, 0x98, 0x4b, 0xb1, 0xa6, 0x19, 0xc9, 0x16, 0x34, 0x90, 0xf4, 0x3b, 0x22, 0xe3,
	0x60, 0x3d, 0xb5, 0x5f, 0x7e, 0x2e, 0x85, 0x16, 0x78, 0x58, 0x53, 0x7c, 0x1b, 0x58, 0x4f, 0x1f,
	0x0e, 0x13, 0x91, 0x08, 0x20, 0x04, 0xe5, 0x97, 0xe1, 0x3e, 0x1c, 0x25, 0x42, 0x24, 0x29, 0x0d,
	0xe0, 0x34, 0x2f, 0x96, 0x41, 0x5c, 0x48, 0xa2, 0x99, 0xc8, 0x6c, 0xdc, 0xfb, 0x7b, 0x5c, 0x33,
	0x4e, 0x95, 0x26, 0x3c, 0xaf, 0x0a, 0x2c, 0x84, 0xe2, 0x42, 0x05, 0x73, 0xa2, 0x68, 0xb0, 0x9e,
	0xce, 0xa9, 0x26, 0xd3, 0x60, 0x21, 0x58, 0x55, 0xa0, 0xa9, 0x97, 0xe6, 0x62, 0xb1, 0x2a, 0xe5,
	0x26, 0x34, 0xa3, 0x8a, 0x29, 0x43, 0x19, 0x13, 0xb4, 0x33, 0x23, 0x92, 0x70, 0x85, 0xbf, 0x44,
	0x6f, 0xc4, 0x4c, 0x69, 0x19, 0x01, 0x33, 0x62, 0x31, 0xcd, 0x34, 0x5b, 0x32, 0x2a, 0x5d, 0xe7,
	0xc0, 0x99, 0xdc, 0x3b, 0x39, 0xbc, 0xde, 0x78, 0x6f, 0x5d, 0x10, 0x9e, 0x3e, 0x1a, 0x6f, 0xe7,
	0x8d, 0xc3, 0x21, 0x04, 0x9e, 0x96, 0xf8, 0xb3, 0x1a, 0xfe, 0xa5, 0x8d, 0xfa, 0x21, 0xac, 0x62,
	0x26, 0x45, 0x22, 0x09, 0xc7, 0x03, 0xd4, 0x66, 0x31, 0x94, 0xed, 0x86, 0x6d, 0x16, 0xe3, 0x77,
	0xd1, 0x3e, 0x64, 0xb2, 0x79, 0xa1, 0x69, 0xb4, 0x94, 0x82, 0xbb, 0xed, 0xb2, 0x67, 0x38, 0xa8,
	0xe1, 0x4f, 0xa4, 0xe0, 0xf8, 0x08, 0x75, 0xcb, 0xf1, 0xdc, 0xce, 0x81, 0x33, 0xe9, 0x1d, 0xbf,
	0xe9, 0x9b, 0xf9, 0xfd, 0x72, 0x7e, 0xdf, 0xce, 0xef, 0x9f, 0x0a, 0x96, 0x85, 0x40, 0xc3, 0x1f,
	0xa1, 0x3b, 0x20, 0xd2, 0xed, 0x02, 0x7f, 0xe4, 0x37, 0x2e, 0x07, 0x02, 0xfe, 0x7a, 0xea, 0x1b,
	0xb9, 0xd9, 0x52, 0x84, 0x86, 0x8c, 0x3d, 0xd4, 0x53, 0x9a, 0x48, 0x6d, 0x06, 0x74, 0xef, 0x1c,
	0x38, 0x93, 0x4e, 0x88, 0x00, 0x02, 0x2e, 0x7e, 0x1b, 0xf5, 0xb3, 0x82, 0xcf, 0xa9, 0x5d, 0x81,
	0x72, 0x77, 0x80, 0xb2, 0x67, 0x40, 0xe0, 0x28, 0xfc, 0x35, 0x1a, 0xd2, 0x94, 0x25, 0x6c, 0xce,
	0x52, 0xa6, 0x2f, 0xa2, 0x85, 0x64, 0x9a, 0x4a, 0x46, 0xdc, 0x5d, 0x90, 0xf2, 0x9e, 0xbf, 0xcd,
	0x27, 0xfe, 0xd3, 0x3a, 0xe3, 0xd4, 0x26, 0x84, 0xf7, 0xe9, 0x3f, 0xc1, 0x47, 0x77, 0x7f, 0x78,
	0xe1, 0xb5, 0xfe, 0x78, 0xe1, 0x39, 0xe3, 0x1f, 0x1d, 0xf4, 0x00, 0x5a, 0x9a, 0x15, 0x3f, 0xa9,
	0x16, 0xc6, 0x44, 0xd6, 0xd8, 0xf3, 0x3d, 0xd8, 0xf3, 0xfb, 0xe8, 0x75, 0xd3, 0x2b, 0xca, 0xcd,
	0x4d, 0x44, 0x2c, 0x86, 0x4d, 0x77, 0xc2, 0x7d, 0xd9, 0xbc, 0xa1, 0x67, 0x31, 0xfe, 0x18, 0x0d,
	0x52, 0xf6, 0x6d, 0xc1, 0xe2, 0x52, 0x7d, 0x2e, 0x44, 0x7a, 0xfb, 0xd2, 0xfb, 0x7f, 0x25, 0xcc,
	0x84, 0x48, 0x1b, 0x1a, 0x9f, 0x77, 0x50, 0xcf, 0xc8, 0x3b, 0x4d, 0x09, 0xe3, 0xf8, 0x03, 0xb4,
	0x4b, 0xe2, 0x58, 0x52, 0xa5, 0xac, 0xb7, 0xf0, 0xf5, 0xc6, 0x1b, 0x18, 0x6f, 0xd9, 0xc0, 0x38,
	0xac, 0x28, 0xff, 0x49, 0xf5, 0x73, 0x07, 0xf5, 0x2d, 0x99, 0x70, 0x51, 0x64, 0xfa, 0x56, 0xd5,
	0x27, 0x67, 0x2f, 0x37, 0x5e, 0xeb, 0x7a, 0xe3, 0x0d, 0x4d, 0xff, 0x1b, 0xd9, 0xe3, 0x9f, 0x7e,
	0xf5, 0x26, 0x09, 0xd3, 0xab, 0x62, 0xee, 0x2f, 0x04, 0x0f, 0xec, 0x7b, 0x33, 0x7f, 0x8e, 0x54,
	0xfc, 0x4d, 0xa0, 0x2f, 0x72, 0xaa, 0xa0, 0x90, 0x0a, 0xf7, 0x4c, 0xee, 0x63, 0x48, 0xc5, 0x13,
	0xf4, 0x9a, 0x5a, 0x11, 0x49, 0x55, 0x94, 0x57, 0x4e, 0x71, 0xbb, 0x07, 0x9d, 0x49, 0x27, 0x1c,
	0x18, 0x7c, 0x66, 0xbd, 0x82, 0x0f, 0xd1, 0x9e, 0x16, 0x9a, 0xa4, 0x91, 0xc1, 0xad, 0xe3, 0x7a,
	0x80, 0x7d, 0x0e, 0x50, 0x69, 0x39, 0x7a, 0x9e, 0x33, 0x49, 0xa3, 0x15, 0x65, 0xc9, 0x4a, 0x57,
	0x96, 0x33, 0xe0, 0x19, 0x60, 0xd8, 0x45, 0xbb, 0x8b, 0x72, 0xbf, 0x34, 0x06, 0x97, 0xdd, 0x0d,
	0xab, 0x63, 0xe3, 0x2a, 0x3e, 0x45, 0x83, 0xc7, 0x8b, 0xd2, 0x1c, 0x4f, 0x68, 0x4a, 0x13, 0xa2,
	0x69, 0x99, 0xc5, 0x59, 0xc6, 0x78, 0xc1, 0xe1, 0x32, 0x3a, 0x61, 0x75, 0x84, 0x08, 0x39, 0x87,
	0x48, 0xdb, 0x46, 0xcc, 0x71, 0x5b, 0xbd, 0x2f, 0x24, 0xc9, 0xd4, 0x92, 0xca, 0xff, 0x59, 0xef,
	0x77, 0x07, 0xdd, 0xdf, 0xf2, 0x0a, 0x30, 0x46, 0xdd, 0x8c, 0x70, 0x6a, 0xcd, 0x0c, 0xdf, 0xf8,
	0x33, 0xb4, 0x4f, 0xa0, 0x77, 0xa4, 0x6d, 0x73, 0xa8, 0xdb, 0x3b, 0x7e, 0x67, 0xfb, 0xeb, 0xba,
	0x29, 0xf4, 0xac, 0x15, 0x0e, 0xc8, 0x4d, 0xe9, 0x75, 0xc1, 0xd8, 0x6e, 0xc7, 0xda, 0xe7, 0x5f,
	0x0b, 0x56, 0x9b, 0xac, 0x0b, 0x56, 0x48, 0x3d, 0xd7, 0x49, 0x1f, 0xf5, 0x2a, 0xad, 0x17, 0x39,
	0x3d, 0x49, 0x5e, 0x5e, 0x8e, 0x9c, 0x57, 0x97, 0x23, 0xe7, 0xb7, 0xcb, 0x91, 0xf3, 0xfd, 0xd5,
	0xa8, 0xf5, 0xea, 0x6a, 0xd4, 0xfa, 0xf9, 0x6a, 0xd4, 0x42, 0x0f, 0x98, 0xd8, 0xda, 0x6c, 0xe6,
	0x7c, 0x75, 0xdc, 0x70, 0x62, 0x4d, 0x39, 0x62, 0xa2, 0x71, 0x0a, 0xce, 0xab, 0x5f, 0x26, 0x70,
	0xe6, 0x7c, 0x07, 0xfe, 0xcd, 0x7f, 0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xa3, 0x39,
	0x90, 0xbb, 0x06, 0x00, 0x00,
}

func (this *RewardProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgram)
	if !ok {
		that2, ok := that.(RewardProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.DistributeFrom != that1.DistributeFrom {
		return false
	}
	if !this.Coin.Equal(that1.Coin) {
		return false
	}
	if !this.Epoch.Equal(that1.Epoch) {
		return false
	}
	if this.StartEpoch != that1.StartEpoch {
		return false
	}
	if this.NumberEpochs != that1.NumberEpochs {
		return false
	}
	if !this.EligibilityCriteria.Equal(that1.EligibilityCriteria) {
		return false
	}
	return true
}
func (this *EpochRewardDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochRewardDistribution)
	if !ok {
		that2, ok := that.(EpochRewardDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.LiquidityPool.Equal(that1.LiquidityPool) {
		return false
	}
	return true
}
func (this *RewardClaim) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardClaim)
	if !ok {
		that2, ok := that.(RewardClaim)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.RewardAmount.Equal(&that1.RewardAmount) {
		return false
	}
	if len(this.SharesPerEpoch) != len(that1.SharesPerEpoch) {
		return false
	}
	for i := range this.SharesPerEpoch {
		if this.SharesPerEpoch[i] != that1.SharesPerEpoch[i] {
			return false
		}
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if this.ExpireHeight != that1.ExpireHeight {
		return false
	}
	if this.Claimed != that1.Claimed {
		return false
	}
	return true
}
func (this *ActionDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionDelegate)
	if !ok {
		that2, ok := that.(ActionDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	return true
}
func (this *ActionTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionTransfer)
	if !ok {
		that2, ok := that.(ActionTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	return true
}
func (this *EligibilityCriteria) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EligibilityCriteria)
	if !ok {
		that2, ok := that.(EligibilityCriteria)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.ActionType == nil {
		if this.ActionType != nil {
			return false
		}
	} else if this.ActionType == nil {
		return false
	} else if !this.ActionType.Equal(that1.ActionType) {
		return false
	}
	return true
}
func (this *EligibilityCriteria_ActionTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EligibilityCriteria_ActionTransfer)
	if !ok {
		that2, ok := that.(EligibilityCriteria_ActionTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionTransfer.Equal(that1.ActionTransfer) {
		return false
	}
	return true
}
func (this *EligibilityCriteria_ActionDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EligibilityCriteria_ActionDelegate)
	if !ok {
		that2, ok := that.(EligibilityCriteria_ActionDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionDelegate.Equal(that1.ActionDelegate) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistrEpochIdentifier) > 0 {
		i -= len(m.DistrEpochIdentifier)
		copy(dAtA[i:], m.DistrEpochIdentifier)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistrEpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EligibilityCriteria != nil {
		{
			size, err := m.EligibilityCriteria.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.NumberEpochs != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.NumberEpochs))
		i--
		dAtA[i] = 0x30
	}
	if m.StartEpoch != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.StartEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DistributeFrom) > 0 {
		i -= len(m.DistributeFrom)
		copy(dAtA[i:], m.DistributeFrom)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFrom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochRewardDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochRewardDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochRewardDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiquidityPool != nil {
		{
			size, err := m.LiquidityPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ExpireHeight != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ExpireHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalShares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharesPerEpoch) > 0 {
		dAtA6 := make([]byte, len(m.SharesPerEpoch)*10)
		var j5 int
		for _, num1 := range m.SharesPerEpoch {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintReward(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.RewardAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maximum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Maximum))
		i--
		dAtA[i] = 0x10
	}
	if m.Minimum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Minimum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maximum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Maximum))
		i--
		dAtA[i] = 0x10
	}
	if m.Minimum != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Minimum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EligibilityCriteria) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteria) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionType != nil {
		{
			size := m.ActionType.Size()
			i -= size
			if _, err := m.ActionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EligibilityCriteria_ActionTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteria_ActionTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionTransfer != nil {
		{
			size, err := m.ActionTransfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EligibilityCriteria_ActionDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EligibilityCriteria_ActionDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionDelegate != nil {
		{
			size, err := m.ActionDelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DistrEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *RewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReward(uint64(m.Id))
	}
	l = len(m.DistributeFrom)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	if m.StartEpoch != 0 {
		n += 1 + sovReward(uint64(m.StartEpoch))
	}
	if m.NumberEpochs != 0 {
		n += 1 + sovReward(uint64(m.NumberEpochs))
	}
	if m.EligibilityCriteria != nil {
		l = m.EligibilityCriteria.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *EpochRewardDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	if m.LiquidityPool != nil {
		l = m.LiquidityPool.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *RewardClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	l = m.RewardAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	if len(m.SharesPerEpoch) > 0 {
		l = 0
		for _, e := range m.SharesPerEpoch {
			l += sovReward(uint64(e))
		}
		n += 1 + sovReward(uint64(l)) + l
	}
	if m.TotalShares != 0 {
		n += 1 + sovReward(uint64(m.TotalShares))
	}
	if m.ExpireHeight != 0 {
		n += 1 + sovReward(uint64(m.ExpireHeight))
	}
	if m.Claimed {
		n += 2
	}
	return n
}

func (m *ActionDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minimum != 0 {
		n += 1 + sovReward(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovReward(uint64(m.Maximum))
	}
	return n
}

func (m *ActionTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Minimum != 0 {
		n += 1 + sovReward(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovReward(uint64(m.Maximum))
	}
	return n
}

func (m *EligibilityCriteria) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.ActionType != nil {
		n += m.ActionType.Size()
	}
	return n
}

func (m *EligibilityCriteria_ActionTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionTransfer != nil {
		l = m.ActionTransfer.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *EligibilityCriteria_ActionDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionDelegate != nil {
		l = m.ActionDelegate.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &types.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &types1.EpochInfo{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpoch", wireType)
			}
			m.StartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberEpochs", wireType)
			}
			m.NumberEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberEpochs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibilityCriteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EligibilityCriteria == nil {
				m.EligibilityCriteria = &EligibilityCriteria{}
			}
			if err := m.EligibilityCriteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochRewardDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochRewardDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochRewardDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidityPool == nil {
				m.LiquidityPool = &types.Coin{}
			}
			if err := m.LiquidityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReward
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SharesPerEpoch = append(m.SharesPerEpoch, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReward
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReward
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReward
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SharesPerEpoch) == 0 {
					m.SharesPerEpoch = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SharesPerEpoch = append(m.SharesPerEpoch, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesPerEpoch", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireHeight", wireType)
			}
			m.ExpireHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EligibilityCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EligibilityCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EligibilityCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &EligibilityCriteria_ActionTransfer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionType = &EligibilityCriteria_ActionDelegate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
