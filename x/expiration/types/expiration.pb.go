// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/expiration/v1/expiration.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the expiration module.
type Params struct {
	// the deposit amount for holding module assets on chain
	Deposit types.Coin `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit"`
	// duration is the period upon which an expiration will stay on chain
	// when the period elapses the module asset is up for extension or deletion
	//
	// the accepted values for a duration are n{h,d,w,y}
	// where 1h = 60m, 1d = 24h, 1w = 7d (or 168h), 1y = 365d (or 8760h)
	Duration string `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_55597788ec54e660, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Params) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

// Expiration holds a typed key/value structure for data associated with an expiring module asset
type Expiration struct {
	// the module asset identifier
	ModuleAssetId string `protobuf:"bytes,1,opt,name=module_asset_id,json=moduleAssetId,proto3" json:"module_asset_id,omitempty"`
	// The bech32 address the expiration is bound to
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The time the module asset expires
	Time time.Time `protobuf:"bytes,3,opt,name=time,proto3,stdtime" json:"time"`
	// The deposit amount held while module asset is in use
	Deposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=deposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit"`
	// Message relating to the expiring module asset
	Message types1.Any `protobuf:"bytes,5,opt,name=message,proto3" json:"message"`
}

func (m *Expiration) Reset()         { *m = Expiration{} }
func (m *Expiration) String() string { return proto.CompactTextString(m) }
func (*Expiration) ProtoMessage()    {}
func (*Expiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_55597788ec54e660, []int{1}
}
func (m *Expiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expiration.Merge(m, src)
}
func (m *Expiration) XXX_Size() int {
	return m.Size()
}
func (m *Expiration) XXX_DiscardUnknown() {
	xxx_messageInfo_Expiration.DiscardUnknown(m)
}

var xxx_messageInfo_Expiration proto.InternalMessageInfo

func (m *Expiration) GetModuleAssetId() string {
	if m != nil {
		return m.ModuleAssetId
	}
	return ""
}

func (m *Expiration) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Expiration) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *Expiration) GetDeposit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *Expiration) GetMessage() types1.Any {
	if m != nil {
		return m.Message
	}
	return types1.Any{}
}

func init() {
	proto.RegisterType((*Params)(nil), "provenance.expiration.v1.Params")
	proto.RegisterType((*Expiration)(nil), "provenance.expiration.v1.Expiration")
}

func init() {
	proto.RegisterFile("provenance/expiration/v1/expiration.proto", fileDescriptor_55597788ec54e660)
}

var fileDescriptor_55597788ec54e660 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x3d, 0x6f, 0xd4, 0x40,
	0x14, 0xf4, 0x26, 0x97, 0xaf, 0x05, 0x84, 0x64, 0x5d, 0xe1, 0x18, 0xc9, 0xb6, 0x52, 0xa0, 0xa3,
	0xc8, 0x2e, 0x06, 0x84, 0x80, 0x2e, 0x87, 0x28, 0xe8, 0x22, 0x8b, 0x8a, 0x26, 0x5a, 0xdb, 0x8b,
	0x59, 0x91, 0xf5, 0xb3, 0xbc, 0x6b, 0x93, 0xeb, 0xf8, 0x09, 0x29, 0x29, 0x43, 0xcb, 0x2f, 0x49,
	0x99, 0x92, 0x02, 0x71, 0xe8, 0xae, 0xe1, 0x67, 0x20, 0xaf, 0xed, 0xb3, 0x05, 0x88, 0xca, 0x9e,
	0xf7, 0x66, 0xec, 0x99, 0xd1, 0xc3, 0x0f, 0x8a, 0x12, 0x6a, 0x9e, 0xb3, 0x3c, 0xe1, 0x94, 0x5f,
	0x14, 0xa2, 0x64, 0x5a, 0x40, 0x4e, 0xeb, 0x70, 0x84, 0x48, 0x51, 0x82, 0x06, 0xdb, 0x19, 0xa8,
	0x64, 0xb4, 0xac, 0x43, 0x77, 0x9a, 0x41, 0x06, 0x86, 0x44, 0x9b, 0xb7, 0x96, 0xef, 0x1e, 0x66,
	0x00, 0xd9, 0x39, 0xa7, 0x06, 0xc5, 0xd5, 0x3b, 0xca, 0xf2, 0x45, 0xb7, 0xf2, 0xff, 0x5c, 0x69,
	0x21, 0xb9, 0xd2, 0x4c, 0x16, 0x1d, 0xc1, 0x4b, 0x40, 0x49, 0x50, 0x34, 0x66, 0x8a, 0xd3, 0x3a,
	0x8c, 0xb9, 0x66, 0x21, 0x4d, 0x40, 0x74, 0x5e, 0x8e, 0x24, 0xde, 0x3d, 0x65, 0x25, 0x93, 0xca,
	0x7e, 0x8e, 0xf7, 0x52, 0x5e, 0x80, 0x12, 0xda, 0x41, 0x01, 0x9a, 0xdd, 0x7a, 0x74, 0x48, 0x5a,
	0x2d, 0x69, 0xb4, 0xa4, 0xd3, 0x92, 0x97, 0x20, 0xf2, 0xf9, 0xe4, 0xfa, 0x87, 0x6f, 0x45, 0x3d,
	0xdf, 0x76, 0xf1, 0x7e, 0x5a, 0xb5, 0x29, 0x9c, 0xad, 0x00, 0xcd, 0x0e, 0xa2, 0x0d, 0x7e, 0x71,
	0xfb, 0xf3, 0x95, 0x6f, 0xfd, 0xba, 0xf2, 0xd1, 0xa7, 0xef, 0x01, 0x3a, 0xfa, 0xb2, 0x85, 0xf1,
	0xab, 0x4d, 0x64, 0xfb, 0x3e, 0xbe, 0x2b, 0x21, 0xad, 0xce, 0xf9, 0x19, 0x53, 0x8a, 0xeb, 0x33,
	0x91, 0x9a, 0x7f, 0x1f, 0x44, 0x77, 0xda, 0xf1, 0x49, 0x33, 0x7d, 0x9d, 0xda, 0x53, 0xbc, 0x03,
	0x1f, 0x73, 0x5e, 0x76, 0x5f, 0x6f, 0x81, 0xfd, 0x0c, 0x4f, 0x9a, 0xb8, 0xce, 0xb6, 0xb1, 0xeb,
	0x92, 0xb6, 0x0b, 0xd2, 0x77, 0x41, 0xde, 0xf4, 0x5d, 0xcc, 0xf7, 0x1b, 0xbf, 0x97, 0x4b, 0x1f,
	0x45, 0x46, 0x61, 0xf3, 0x21, 0xeb, 0x24, 0xd8, 0xfe, 0x7f, 0xd6, 0x87, 0x8d, 0xf6, 0xeb, 0xd2,
	0x9f, 0x65, 0x42, 0xbf, 0xaf, 0x62, 0x92, 0x80, 0xa4, 0x5d, 0xa9, 0xed, 0xe3, 0x58, 0xa5, 0x1f,
	0xa8, 0x5e, 0x14, 0x5c, 0x19, 0x81, 0x1a, 0x7a, 0x79, 0x82, 0xf7, 0x24, 0x57, 0x8a, 0x65, 0xdc,
	0xd9, 0x31, 0x1e, 0xa7, 0x7f, 0x79, 0x3c, 0xc9, 0x17, 0x7d, 0x9b, 0x1d, 0x75, 0x0e, 0xd7, 0x2b,
	0x0f, 0xdd, 0xac, 0x3c, 0xf4, 0x73, 0xe5, 0xa1, 0xcb, 0xb5, 0x67, 0xdd, 0xac, 0x3d, 0xeb, 0xdb,
	0xda, 0xb3, 0xf0, 0x3d, 0x61, 0x4e, 0xe2, 0x9f, 0xb7, 0x73, 0x8a, 0xde, 0x3e, 0x1d, 0x39, 0x1c,
	0x68, 0xc7, 0x02, 0x46, 0x88, 0x5e, 0x8c, 0xaf, 0xd3, 0xb8, 0x8e, 0x77, 0x8d, 0x9b, 0xc7, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xef, 0x9c, 0x99, 0xc3, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deposit.Equal(&that1.Deposit) {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintExpiration(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExpiration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Expiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expiration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expiration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExpiration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExpiration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintExpiration(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintExpiration(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleAssetId) > 0 {
		i -= len(m.ModuleAssetId)
		copy(dAtA[i:], m.ModuleAssetId)
		i = encodeVarintExpiration(dAtA, i, uint64(len(m.ModuleAssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpiration(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpiration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovExpiration(uint64(l))
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovExpiration(uint64(l))
	}
	return n
}

func (m *Expiration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleAssetId)
	if l > 0 {
		n += 1 + l + sovExpiration(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovExpiration(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovExpiration(uint64(l))
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovExpiration(uint64(l))
		}
	}
	l = m.Message.Size()
	n += 1 + l + sovExpiration(uint64(l))
	return n
}

func sovExpiration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpiration(x uint64) (n int) {
	return sovExpiration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`Deposit:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Deposit), "Coin", "types.Coin", 1), `&`, ``, 1) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExpiration(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpiration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpiration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpiration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpiration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpiration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpiration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpiration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpiration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpiration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpiration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpiration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpiration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpiration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpiration = fmt.Errorf("proto: unexpected end of group")
)
