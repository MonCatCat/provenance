// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/expiration/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryExpirationRequest queries for a specific expiration
type QueryExpirationRequest struct {
	ModuleAssetId string `protobuf:"bytes,1,opt,name=module_asset_id,json=moduleAssetId,proto3" json:"module_asset_id,omitempty" yaml:"module_asset_id"`
}

func (m *QueryExpirationRequest) Reset()         { *m = QueryExpirationRequest{} }
func (m *QueryExpirationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExpirationRequest) ProtoMessage()    {}
func (*QueryExpirationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{2}
}
func (m *QueryExpirationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpirationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpirationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpirationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpirationRequest.Merge(m, src)
}
func (m *QueryExpirationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpirationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpirationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpirationRequest proto.InternalMessageInfo

func (m *QueryExpirationRequest) GetModuleAssetId() string {
	if m != nil {
		return m.ModuleAssetId
	}
	return ""
}

// QueryExpirationResponse response for querying for a specific expiration
type QueryExpirationResponse struct {
	Expiration *Expiration `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (m *QueryExpirationResponse) Reset()         { *m = QueryExpirationResponse{} }
func (m *QueryExpirationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExpirationResponse) ProtoMessage()    {}
func (*QueryExpirationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{3}
}
func (m *QueryExpirationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpirationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpirationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpirationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpirationResponse.Merge(m, src)
}
func (m *QueryExpirationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpirationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpirationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpirationResponse proto.InternalMessageInfo

func (m *QueryExpirationResponse) GetExpiration() *Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

// QueryAllExpirationsRequest queries all expirations
type QueryAllExpirationsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpirationsRequest) Reset()         { *m = QueryAllExpirationsRequest{} }
func (m *QueryAllExpirationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpirationsRequest) ProtoMessage()    {}
func (*QueryAllExpirationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{4}
}
func (m *QueryAllExpirationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpirationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpirationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpirationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpirationsRequest.Merge(m, src)
}
func (m *QueryAllExpirationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpirationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpirationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpirationsRequest proto.InternalMessageInfo

func (m *QueryAllExpirationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllExpirationsResponse response for querying all expirations
type QueryAllExpirationsResponse struct {
	Expirations []*Expiration `protobuf:"bytes,1,rep,name=expirations,proto3" json:"expirations,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpirationsResponse) Reset()         { *m = QueryAllExpirationsResponse{} }
func (m *QueryAllExpirationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpirationsResponse) ProtoMessage()    {}
func (*QueryAllExpirationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{5}
}
func (m *QueryAllExpirationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpirationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpirationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpirationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpirationsResponse.Merge(m, src)
}
func (m *QueryAllExpirationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpirationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpirationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpirationsResponse proto.InternalMessageInfo

func (m *QueryAllExpirationsResponse) GetExpirations() []*Expiration {
	if m != nil {
		return m.Expirations
	}
	return nil
}

func (m *QueryAllExpirationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllExpirationsByOwnerRequest queries all expirations belonging to an owner
type QueryAllExpirationsByOwnerRequest struct {
	// the bech32 address the expiration is bound to
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpirationsByOwnerRequest) Reset()         { *m = QueryAllExpirationsByOwnerRequest{} }
func (m *QueryAllExpirationsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpirationsByOwnerRequest) ProtoMessage()    {}
func (*QueryAllExpirationsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{6}
}
func (m *QueryAllExpirationsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpirationsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpirationsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpirationsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpirationsByOwnerRequest.Merge(m, src)
}
func (m *QueryAllExpirationsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpirationsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpirationsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpirationsByOwnerRequest proto.InternalMessageInfo

func (m *QueryAllExpirationsByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryAllExpirationsByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllExpirationsByOwnerResponse response for querying all expirations by owner
type QueryAllExpirationsByOwnerResponse struct {
	Expirations []*Expiration `protobuf:"bytes,1,rep,name=expirations,proto3" json:"expirations,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpirationsByOwnerResponse) Reset()         { *m = QueryAllExpirationsByOwnerResponse{} }
func (m *QueryAllExpirationsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpirationsByOwnerResponse) ProtoMessage()    {}
func (*QueryAllExpirationsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{7}
}
func (m *QueryAllExpirationsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpirationsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpirationsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpirationsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpirationsByOwnerResponse.Merge(m, src)
}
func (m *QueryAllExpirationsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpirationsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpirationsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpirationsByOwnerResponse proto.InternalMessageInfo

func (m *QueryAllExpirationsByOwnerResponse) GetExpirations() []*Expiration {
	if m != nil {
		return m.Expirations
	}
	return nil
}

func (m *QueryAllExpirationsByOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllExpiredExpirationsRequest queries all expired expirations
type QueryAllExpiredExpirationsRequest struct {
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredExpirationsRequest) Reset()         { *m = QueryAllExpiredExpirationsRequest{} }
func (m *QueryAllExpiredExpirationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredExpirationsRequest) ProtoMessage()    {}
func (*QueryAllExpiredExpirationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{8}
}
func (m *QueryAllExpiredExpirationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredExpirationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredExpirationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredExpirationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredExpirationsRequest.Merge(m, src)
}
func (m *QueryAllExpiredExpirationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredExpirationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredExpirationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredExpirationsRequest proto.InternalMessageInfo

func (m *QueryAllExpiredExpirationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllExpiredExpirationsResponse response for querying all expired expirations
type QueryAllExpiredExpirationsResponse struct {
	Expirations []*Expiration `protobuf:"bytes,1,rep,name=expirations,proto3" json:"expirations,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredExpirationsResponse) Reset()         { *m = QueryAllExpiredExpirationsResponse{} }
func (m *QueryAllExpiredExpirationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredExpirationsResponse) ProtoMessage()    {}
func (*QueryAllExpiredExpirationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f2be75c30ba33cb, []int{9}
}
func (m *QueryAllExpiredExpirationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredExpirationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredExpirationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredExpirationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredExpirationsResponse.Merge(m, src)
}
func (m *QueryAllExpiredExpirationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredExpirationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredExpirationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredExpirationsResponse proto.InternalMessageInfo

func (m *QueryAllExpiredExpirationsResponse) GetExpirations() []*Expiration {
	if m != nil {
		return m.Expirations
	}
	return nil
}

func (m *QueryAllExpiredExpirationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.expiration.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.expiration.v1.QueryParamsResponse")
	proto.RegisterType((*QueryExpirationRequest)(nil), "provenance.expiration.v1.QueryExpirationRequest")
	proto.RegisterType((*QueryExpirationResponse)(nil), "provenance.expiration.v1.QueryExpirationResponse")
	proto.RegisterType((*QueryAllExpirationsRequest)(nil), "provenance.expiration.v1.QueryAllExpirationsRequest")
	proto.RegisterType((*QueryAllExpirationsResponse)(nil), "provenance.expiration.v1.QueryAllExpirationsResponse")
	proto.RegisterType((*QueryAllExpirationsByOwnerRequest)(nil), "provenance.expiration.v1.QueryAllExpirationsByOwnerRequest")
	proto.RegisterType((*QueryAllExpirationsByOwnerResponse)(nil), "provenance.expiration.v1.QueryAllExpirationsByOwnerResponse")
	proto.RegisterType((*QueryAllExpiredExpirationsRequest)(nil), "provenance.expiration.v1.QueryAllExpiredExpirationsRequest")
	proto.RegisterType((*QueryAllExpiredExpirationsResponse)(nil), "provenance.expiration.v1.QueryAllExpiredExpirationsResponse")
}

func init() {
	proto.RegisterFile("provenance/expiration/v1/query.proto", fileDescriptor_0f2be75c30ba33cb)
}

var fileDescriptor_0f2be75c30ba33cb = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0x85, 0x46, 0xe2, 0x55, 0x80, 0x34, 0x94, 0x52, 0xb9, 0xe0, 0x16, 0xab, 0xa5,
	0xe5, 0x4f, 0x6c, 0xd2, 0x02, 0x0b, 0x40, 0x48, 0x8d, 0xa0, 0x88, 0x15, 0x21, 0x12, 0x1b, 0x84,
	0x14, 0x4d, 0x92, 0x91, 0xb1, 0x70, 0x3c, 0xae, 0xed, 0x84, 0x46, 0x55, 0x17, 0x70, 0x01, 0x90,
	0xb8, 0x02, 0x62, 0xc9, 0x8e, 0x03, 0xb0, 0xeb, 0xb2, 0x12, 0x1b, 0x56, 0x15, 0x4a, 0xb8, 0x00,
	0x9c, 0x00, 0x79, 0x66, 0x8a, 0xed, 0xc4, 0x6e, 0x92, 0x8a, 0x45, 0x77, 0xf1, 0xe4, 0x7b, 0xf3,
	0xfd, 0xde, 0x1b, 0xcf, 0x27, 0xc3, 0xa2, 0xeb, 0xb1, 0x36, 0x75, 0x88, 0x53, 0xa7, 0x06, 0xdd,
	0x72, 0x2d, 0x8f, 0x04, 0x16, 0x73, 0x8c, 0x76, 0xd1, 0xd8, 0x6c, 0x51, 0xaf, 0xa3, 0xbb, 0x1e,
	0x0b, 0x18, 0x9e, 0x8d, 0x54, 0x7a, 0xa4, 0xd2, 0xdb, 0x45, 0x65, 0xda, 0x64, 0x26, 0xe3, 0x22,
	0x23, 0xfc, 0x25, 0xf4, 0xca, 0x45, 0x93, 0x31, 0xd3, 0xa6, 0x06, 0x71, 0x2d, 0x83, 0x38, 0x0e,
	0x0b, 0xb8, 0xde, 0x97, 0xff, 0x5e, 0xcd, 0xf4, 0x8c, 0xed, 0x2d, 0xa4, 0xd7, 0xea, 0xcc, 0x6f,
	0x32, 0xdf, 0xa8, 0x11, 0x9f, 0x0a, 0x22, 0xa3, 0x5d, 0xac, 0xd1, 0x80, 0x14, 0x0d, 0x97, 0x98,
	0x96, 0x13, 0xd3, 0x6a, 0xd3, 0x80, 0x9f, 0x85, 0x8a, 0x32, 0xf1, 0x48, 0xd3, 0xaf, 0xd0, 0xcd,
	0x16, 0xf5, 0x03, 0xed, 0x39, 0x9c, 0x4b, 0xac, 0xfa, 0x2e, 0x73, 0x7c, 0x8a, 0x1f, 0x40, 0xde,
	0xe5, 0x2b, 0xb3, 0x68, 0x01, 0xad, 0x4c, 0xad, 0x2e, 0xe8, 0x59, 0x2d, 0xea, 0xa2, 0xb2, 0x74,
	0x72, 0x77, 0x7f, 0x3e, 0x57, 0x91, 0x55, 0xda, 0x4b, 0x98, 0xe1, 0xdb, 0x3e, 0xfa, 0x27, 0x95,
	0x86, 0xb8, 0x04, 0x67, 0x9b, 0xac, 0xd1, 0xb2, 0x69, 0x95, 0xf8, 0x3e, 0x0d, 0xaa, 0x56, 0x83,
	0x5b, 0x9c, 0x2a, 0x29, 0x7f, 0xf6, 0xe7, 0x67, 0x3a, 0xa4, 0x69, 0xdf, 0xd5, 0xfa, 0x04, 0x5a,
	0xe5, 0xb4, 0x58, 0x59, 0x0f, 0x17, 0x9e, 0x34, 0xb4, 0x2a, 0x5c, 0x18, 0xd8, 0x5d, 0x82, 0x3f,
	0x04, 0x88, 0xf0, 0x24, 0xfc, 0x62, 0x36, 0x7c, 0x6c, 0x87, 0x58, 0x9d, 0xd6, 0x00, 0x85, 0x1b,
	0xac, 0xdb, 0x76, 0xa4, 0x38, 0x98, 0x19, 0xde, 0x00, 0x88, 0xa6, 0x2b, 0x3d, 0xae, 0xe8, 0xe2,
	0x28, 0xf4, 0xf0, 0x28, 0x74, 0xf1, 0x72, 0xc8, 0xa3, 0xd0, 0xcb, 0xc4, 0xa4, 0xb2, 0xb6, 0x12,
	0xab, 0xd4, 0xbe, 0x20, 0x98, 0x4b, 0xb5, 0x91, 0xbd, 0x6c, 0xc0, 0x54, 0xc4, 0x14, 0x9e, 0xc4,
	0x89, 0x91, 0x9b, 0x89, 0x17, 0xe2, 0xc7, 0x09, 0xde, 0x09, 0xce, 0xbb, 0x3c, 0x94, 0x57, 0x40,
	0x24, 0x80, 0xdf, 0x22, 0xb8, 0x9c, 0x02, 0x5c, 0xea, 0x3c, 0x7d, 0xe3, 0x50, 0xef, 0x60, 0x3c,
	0xd3, 0x30, 0xc9, 0xc2, 0x67, 0x71, 0xae, 0x15, 0xf1, 0xd0, 0x37, 0xb4, 0x89, 0x23, 0x0f, 0xed,
	0x2b, 0x02, 0xed, 0x30, 0x86, 0xe3, 0x3a, 0xbb, 0xd7, 0x7d, 0xa3, 0xa3, 0x8d, 0xa1, 0x6f, 0xd6,
	0x7f, 0x1c, 0x52, 0x9f, 0xdb, 0x31, 0x1d, 0xd2, 0xea, 0xef, 0x3c, 0x4c, 0x72, 0x6e, 0xfc, 0x1e,
	0x41, 0x5e, 0x24, 0x0b, 0xbe, 0x91, 0x0d, 0x34, 0x18, 0x68, 0x4a, 0x61, 0x44, 0xb5, 0x70, 0xd7,
	0x56, 0xde, 0x7d, 0xff, 0xf5, 0x71, 0x42, 0xc3, 0x0b, 0x46, 0x66, 0xea, 0x8a, 0x48, 0xc3, 0x9f,
	0x11, 0x40, 0x34, 0x00, 0x7c, 0x73, 0x88, 0xcf, 0x40, 0xf2, 0x29, 0xc5, 0x31, 0x2a, 0x24, 0xdd,
	0x1a, 0xa7, 0x2b, 0xe0, 0xeb, 0xd9, 0x74, 0xdb, 0x7d, 0x61, 0xb9, 0x83, 0x3f, 0x21, 0x38, 0x93,
	0xbc, 0x1c, 0xf8, 0xd6, 0x10, 0xeb, 0xd4, 0x9c, 0x53, 0x6e, 0x8f, 0x59, 0x25, 0xa1, 0x97, 0x38,
	0xf4, 0x3c, 0xbe, 0x94, 0x0d, 0x4d, 0x6c, 0x1b, 0x7f, 0x43, 0x70, 0x3e, 0xf5, 0x0e, 0xe3, 0x7b,
	0x63, 0xf9, 0x26, 0xd3, 0x47, 0xb9, 0x7f, 0xb4, 0x62, 0xc9, 0x5e, 0xe0, 0xec, 0xcb, 0x78, 0xe9,
	0x50, 0x76, 0x63, 0x9b, 0x67, 0xda, 0x4e, 0xa2, 0x87, 0xc4, 0x15, 0x1b, 0xb9, 0x87, 0xb4, 0x18,
	0x18, 0xb9, 0x87, 0xd4, 0x5b, 0x3d, 0x6a, 0x0f, 0x54, 0xec, 0x50, 0x62, 0xbb, 0x5d, 0x15, 0xed,
	0x75, 0x55, 0xf4, 0xb3, 0xab, 0xa2, 0x0f, 0x3d, 0x35, 0xb7, 0xd7, 0x53, 0x73, 0x3f, 0x7a, 0x6a,
	0x0e, 0xe6, 0x2c, 0x96, 0x09, 0x52, 0x46, 0x2f, 0xee, 0x98, 0x56, 0xf0, 0xaa, 0x55, 0xd3, 0xeb,
	0xac, 0x19, 0x73, 0x2a, 0x58, 0x2c, 0xee, 0xbb, 0x15, 0x77, 0x0e, 0x3a, 0x2e, 0xf5, 0x6b, 0x79,
	0xfe, 0x3d, 0xb2, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x49, 0x0c, 0xdb, 0x9c, 0x5c, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters for x/expiration
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Query Expiration
	Expiration(ctx context.Context, in *QueryExpirationRequest, opts ...grpc.CallOption) (*QueryExpirationResponse, error)
	// Query all Expirations
	AllExpirations(ctx context.Context, in *QueryAllExpirationsRequest, opts ...grpc.CallOption) (*QueryAllExpirationsResponse, error)
	// Query Expirations by owner
	AllExpirationsByOwner(ctx context.Context, in *QueryAllExpirationsByOwnerRequest, opts ...grpc.CallOption) (*QueryAllExpirationsByOwnerResponse, error)
	// Query all expired Expirations
	AllExpiredExpirations(ctx context.Context, in *QueryAllExpiredExpirationsRequest, opts ...grpc.CallOption) (*QueryAllExpiredExpirationsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.expiration.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Expiration(ctx context.Context, in *QueryExpirationRequest, opts ...grpc.CallOption) (*QueryExpirationResponse, error) {
	out := new(QueryExpirationResponse)
	err := c.cc.Invoke(ctx, "/provenance.expiration.v1.Query/Expiration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExpirations(ctx context.Context, in *QueryAllExpirationsRequest, opts ...grpc.CallOption) (*QueryAllExpirationsResponse, error) {
	out := new(QueryAllExpirationsResponse)
	err := c.cc.Invoke(ctx, "/provenance.expiration.v1.Query/AllExpirations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExpirationsByOwner(ctx context.Context, in *QueryAllExpirationsByOwnerRequest, opts ...grpc.CallOption) (*QueryAllExpirationsByOwnerResponse, error) {
	out := new(QueryAllExpirationsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/provenance.expiration.v1.Query/AllExpirationsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExpiredExpirations(ctx context.Context, in *QueryAllExpiredExpirationsRequest, opts ...grpc.CallOption) (*QueryAllExpiredExpirationsResponse, error) {
	out := new(QueryAllExpiredExpirationsResponse)
	err := c.cc.Invoke(ctx, "/provenance.expiration.v1.Query/AllExpiredExpirations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters for x/expiration
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Query Expiration
	Expiration(context.Context, *QueryExpirationRequest) (*QueryExpirationResponse, error)
	// Query all Expirations
	AllExpirations(context.Context, *QueryAllExpirationsRequest) (*QueryAllExpirationsResponse, error)
	// Query Expirations by owner
	AllExpirationsByOwner(context.Context, *QueryAllExpirationsByOwnerRequest) (*QueryAllExpirationsByOwnerResponse, error)
	// Query all expired Expirations
	AllExpiredExpirations(context.Context, *QueryAllExpiredExpirationsRequest) (*QueryAllExpiredExpirationsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Expiration(ctx context.Context, req *QueryExpirationRequest) (*QueryExpirationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expiration not implemented")
}
func (*UnimplementedQueryServer) AllExpirations(ctx context.Context, req *QueryAllExpirationsRequest) (*QueryAllExpirationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExpirations not implemented")
}
func (*UnimplementedQueryServer) AllExpirationsByOwner(ctx context.Context, req *QueryAllExpirationsByOwnerRequest) (*QueryAllExpirationsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExpirationsByOwner not implemented")
}
func (*UnimplementedQueryServer) AllExpiredExpirations(ctx context.Context, req *QueryAllExpiredExpirationsRequest) (*QueryAllExpiredExpirationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExpiredExpirations not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.expiration.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Expiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpirationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Expiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.expiration.v1.Query/Expiration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Expiration(ctx, req.(*QueryExpirationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExpirations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpirationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExpirations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.expiration.v1.Query/AllExpirations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExpirations(ctx, req.(*QueryAllExpirationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExpirationsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpirationsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExpirationsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.expiration.v1.Query/AllExpirationsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExpirationsByOwner(ctx, req.(*QueryAllExpirationsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExpiredExpirations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredExpirationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExpiredExpirations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.expiration.v1.Query/AllExpiredExpirations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExpiredExpirations(ctx, req.(*QueryAllExpiredExpirationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.expiration.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Expiration",
			Handler:    _Query_Expiration_Handler,
		},
		{
			MethodName: "AllExpirations",
			Handler:    _Query_AllExpirations_Handler,
		},
		{
			MethodName: "AllExpirationsByOwner",
			Handler:    _Query_AllExpirationsByOwner_Handler,
		},
		{
			MethodName: "AllExpiredExpirations",
			Handler:    _Query_AllExpiredExpirations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/expiration/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExpirationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpirationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpirationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleAssetId) > 0 {
		i -= len(m.ModuleAssetId)
		copy(dAtA[i:], m.ModuleAssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModuleAssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpirationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpirationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpirationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != nil {
		{
			size, err := m.Expiration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpirationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpirationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpirationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpirationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpirationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpirationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Expirations) > 0 {
		for iNdEx := len(m.Expirations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Expirations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpirationsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpirationsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpirationsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpirationsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpirationsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpirationsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Expirations) > 0 {
		for iNdEx := len(m.Expirations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Expirations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredExpirationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredExpirationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredExpirationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredExpirationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredExpirationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredExpirationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Expirations) > 0 {
		for iNdEx := len(m.Expirations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Expirations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExpirationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleAssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpirationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != nil {
		l = m.Expiration.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpirationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpirationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Expirations) > 0 {
		for _, e := range m.Expirations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpirationsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpirationsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Expirations) > 0 {
		for _, e := range m.Expirations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredExpirationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredExpirationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Expirations) > 0 {
		for _, e := range m.Expirations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpirationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpirationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpirationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpirationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpirationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpirationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = &Expiration{}
			}
			if err := m.Expiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpirationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpirationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpirationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpirationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpirationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpirationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expirations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expirations = append(m.Expirations, &Expiration{})
			if err := m.Expirations[len(m.Expirations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpirationsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpirationsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpirationsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpirationsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpirationsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpirationsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expirations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expirations = append(m.Expirations, &Expiration{})
			if err := m.Expirations[len(m.Expirations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredExpirationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredExpirationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredExpirationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredExpirationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredExpirationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredExpirationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expirations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expirations = append(m.Expirations, &Expiration{})
			if err := m.Expirations[len(m.Expirations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
