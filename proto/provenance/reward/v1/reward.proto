syntax = "proto3";
package provenance.reward.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "provenance/epoch/v1/genesis.proto";

option go_package          = "github.com/provenance-io/provenance/x/reward/types";
option java_package        = "io.provenance.reward.v1";
option java_multiple_files = true;

// Params holds parameters for the reward module
message Params {
  // distribution epoch identifier
  string distr_epoch_identifier = 1 [(gogoproto.moretags) = "yaml:\"distr_epoch_identifier\""];
}

// RewardProgram
message RewardProgram {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  uint64                   id                   = 1;
  string                   distribute_from      = 2;
  cosmos.base.v1beta1.Coin coin                 = 3;
  provenance.epoch.v1.EpochInfo epoch           = 4; // EpochInfo defines the type of epoch attributed to this program.(e.g day,week,month)
  int64                    start_epoch          = 5; // start_epoch defines the epoch number at which the rewards program should begin at
  int64                    number_epochs        = 6; // number of epochs this program will last for
  EligibilityCriteria                    eligibility_criteria = 7;
}

// EpochRewardDistribution
message EpochRewardDistribution {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string                   id                = 1;
  int64                    reward_program_id = 2;
  cosmos.base.v1beta1.Coin liquidity_pool    = 3;
}

// // A Reward is the metadata of reward data per address
message RewardClaim {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // address of user reward
  string address = 1 [(gogoproto.moretags) = "yaml:\"address\""];
  int64 reward_program_id = 2;

  // reward per-epoch map---move to message, epoch id, amount, dist or not
  cosmos.base.v1beta1.Coin reward_amount = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false,
    (gogoproto.moretags)     = "yaml:\"reward_amount\""
  ];

  // array of shares calculated per epoch
  repeated int64 shares_per_epoch = 4;
  // total shares at the end of rewards program
  int64 total_shares = 5;
  // if the this height is exceeded before user claims shares will be returned
  int64 expire_height = 6;
  // indicate if the user has claimed their rewards
  bool claimed = 7;
}

message ActionDelegate {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  int64 minimum = 1;
  int64 maximum = 2;
}

message ActionTransfer {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  int64 minimum = 1;
  int64 maximum = 2;
}

// EligibilityCriteria defines an Action which accrues rewards for a running RewardProgram
message EligibilityCriteria {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  string name = 1;
  oneof  action_type {
    ActionTransfer action_transfer = 2;
    ActionDelegate action_delegate = 3;
  }
}
