// Since: provenance 1.12
syntax = "proto3";
package provenance.expiration.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "provenance/expiration/v1/expiration.proto";
// import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package          = "github.com/provenance-io/provenance/x/expiration/types";
option java_package        = "io.provenance.expiration.v1";
option java_multiple_files = true;

// Query defines the gRPC querier service for expiration module.
service Query {
  // Params queries the parameters for x/expiration
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/provenance/expiration/v1/params";
  }

  // Query Expiration
  rpc Expiration(QueryExpirationRequest) returns (QueryExpirationResponse) {
    option (google.api.http).get = "/provenance/expiration/v1/{module_asset_id}";
  }

  // Query all Expirations
  rpc AllExpirations(QueryAllExpirationsRequest) returns (QueryAllExpirationsResponse) {
    option (google.api.http).get = "/provenance/expiration/v1/all";
  }

  // Query Expirations by owner
  rpc AllExpirationsByOwner(QueryAllExpirationsByOwnerRequest) returns (QueryAllExpirationsByOwnerResponse) {
    option (google.api.http).get = "/provenance/expiration/v1/all/{owner}";
  }

  // Query all expired Expirations
  rpc AllExpiredExpirations(QueryAllExpiredExpirationsRequest) returns (QueryAllExpiredExpirationsResponse) {
    option (google.api.http).get = "/provenance/expiration/v1/all/expired";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryExpirationRequest queries for a specific expiration
message QueryExpirationRequest {
  string module_asset_id = 1;
}

// QueryExpirationResponse response for querying for a specific expiration
message QueryExpirationResponse {
  Expiration expiration = 1;
}

// QueryAllExpirationsRequest queries all expirations
message QueryAllExpirationsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryAllExpirationsResponse response for querying all expirations
message QueryAllExpirationsResponse {
  repeated Expiration expirations = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryAllExpirationsByOwnerRequest queries all expirations belonging to an owner
message QueryAllExpirationsByOwnerRequest {
  // the bech32 address the expiration is bound to
  string owner = 1;
  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryAllExpirationsByOwnerResponse response for querying all expirations by owner
message QueryAllExpirationsByOwnerResponse {
  repeated Expiration expirations = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}

// QueryAllExpiredExpirationsRequest queries all expired expirations
message QueryAllExpiredExpirationsRequest {
  // pagination defines an optional pagination for the request
  cosmos.base.query.v1beta1.PageRequest pagination = 99;
}

// QueryAllExpiredExpirationsResponse response for querying all expired expirations
message QueryAllExpiredExpirationsResponse {
  repeated Expiration expirations = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageResponse pagination = 99;
}